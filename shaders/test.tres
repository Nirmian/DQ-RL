[gd_resource type="ShaderMaterial" load_steps=10 format=2]

[ext_resource path="res://shaders/New Piskel.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1111, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=11]
output_port_for_preview = 1
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVec3Constant" id=12]
constant = Vector3( 0.221, 0.194, 0 )

[sub_resource type="VisualShaderNodeScalarOp" id=13]

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 2

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=10]

[sub_resource type="VisualShader" id=6]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_11;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// Vector:12
	vec3 n_out12p0 = vec3(0.221000, 0.194000, 0.000000);

// VectorOp:9
	vec3 n_out9p0 = n_out8p0 + n_out12p0;

// Texture:11
	vec4 tex_frg_11_read = texture(tex_frg_11, n_out9p0.xy);
	vec3 n_out11p0 = tex_frg_11_read.rgb;
	float n_out11p1 = tex_frg_11_read.a;

// ScalarOp:13
	float n_in13p1 = 0.00000;
	float n_out13p0 = n_out11p1 + n_in13p1;

// VectorOp:10
	vec3 n_out10p0 = vec3(n_out3p1) * vec3(n_out13p0);

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -857, 34.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 640, 180 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -140, 100 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( -700, 340 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( -380, 320 )
nodes/fragment/10/node = SubResource( 7 )
nodes/fragment/10/position = Vector2( 380, 260 )
nodes/fragment/11/node = SubResource( 11 )
nodes/fragment/11/position = Vector2( -100, 340 )
nodes/fragment/12/node = SubResource( 12 )
nodes/fragment/12/position = Vector2( -820, 440 )
nodes/fragment/13/node = SubResource( 13 )
nodes/fragment/13/position = Vector2( 180, 400 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 3, 1, 10, 0, 12, 0, 9, 1, 8, 0, 9, 0, 9, 0, 11, 0, 11, 1, 13, 0, 13, 0, 10, 1, 10, 0, 0, 1 )

[resource]
shader = SubResource( 6 )
